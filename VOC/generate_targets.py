#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import h5py

SphConv_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(SphConv_ROOT)

import cfg
import caffe

from util.network import load_sphconv, forward_sphconv
from util.data_io import get_frameId
from VOC.VOCData import load_bboxes, IMG_SPHEREH

def extract_target(frameId, net, src_dir, dst_dir):
    src_path = os.path.join(src_dir, "{}.h5".format(frameId))
    dst_path = os.path.join(dst_dir, "{}.h5".format(frameId))

    if not os.path.isfile(src_path):
        sys.stderr.write("Source {} does not exist.\n".format(src_path))
        return
    if os.path.isfile(dst_path):
        sys.stderr.write("Destination {} exists.\n".format(dst_path))
        return
    lockfile = "{}.lock".format(dst_path)
    if os.path.isfile(lockfile):
        sys.stderr.write("{} being generated by other process.\n".format(dst_path))
        return
    open(lockfile, "a").close()

    with h5py.File(src_path, 'r') as hf:
        src = hf[frameId][:]
    dst = forward_sphconv(src, net)

    with h5py.File(dst_path, 'w') as hf:
        hf.create_dataset(frameId, data=dst,
                          compression="lzf",
                          shuffle=True,
                          chunks=(128, 128, 512))
    os.remove(lockfile)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--parallel', action='store_true')
    parser.add_argument('--rf', type=int, default=224)
    parser.add_argument('--sphereH', type=int, default=320)
    parser.add_argument('--ks', type=int, default=640)
    parser.add_argument('voc', type=int, choices=[2007, 2012], default=2007)
    parser.add_argument('tilt', type=int, default=160)
    parser.add_argument('split', type=int, default=-1)
    args = parser.parse_args()

    n_tasks = 16
    kwargs = {
        "sphereH": args.sphereH,
        "view_angle": 65.5,
        "ks": args.ks,
        "rf_size": args.rf,
    }
    orig_tilt = args.tilt * IMG_SPHEREH / args.sphereH
    paths, _, _ = load_bboxes(orig_tilt, args.voc, **kwargs)
    if len(paths) == 0:
        sys.stderr.write("No projected image found.\n")
        return
    paths = paths[::-1]

    layer = "5_3"
    net = load_sphconv(layer, sphereH=args.sphereH, ks=args.ks, silence=True, pretrained=False)

    src_root = os.path.join(DATA_ROOT, "Pano")
    src_dir = os.path.join(src_root,
                           "Rf{}".format(args.rf),
                           "VOC{}".format(args.voc),
                           "tilt{:03d}".format(args.tilt))

    src_root = os.path.join(DATA_ROOT, "PanoTarget")
    dst_dir = os.path.join(dst_root,
                           "Rf{}".format(args.rf),
                           "VOC{}".format(args.voc),
                           "tilt{:03d}".format(args.tilt))
    if not os.path.isdir(dst_dir):
        os.makedirs(dst_dir)

    for i, path in enumerate(paths):
        if args.split < 0 or i % n_tasks == args.split:
            frameId = get_frameId(path)
            extract_target(frameId, net, src_dir, dst_dir)

if __name__ == "__main__":
    main()

